<Application x:Class="GameLauncher.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:GameLauncher"
             StartupUri="MainWindow.xaml">
    <Application.Resources>



    <!--
        Custom templates
    -->

        <Style TargetType="Button" x:Key="MMCButton">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                Padding="10"
                                CornerRadius="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource HighlightBackground}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource PressedBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="IMMCButton"> <!-- Inverted MMC Button -->
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="Foreground" Value="{DynamicResource Background}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                Padding="10"
                                CornerRadius="1,5,1,1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource HighlightBackground}" />
                                <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource PressedBackground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="{x:Type Grid}" x:Key="GridHover">
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
                                                 To="1.1" Duration="0:0:0.3"/>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                                                 To="1.1" Duration="0:0:0.3"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
                                                 To="1" Duration="0:0:0.3"/>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                                                 To="1" Duration="0:0:0.3"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="RoundedPosButton" TargetType="{x:Type Button}"> <!-- Source code from https://gist.github.com/pocari/ef7778f1d67f568001e8 -->
            <Style.Setters>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="button" CornerRadius="5" BorderBrush="Black" BorderThickness="1" Background="{DynamicResource SelectablePrimary}">
                                <TextBlock  Text="{TemplateBinding Button.Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="button" Property="BorderBrush" Value="#FF5798d8" />
                                    <Setter TargetName="button" Property="Background"  Value="Red"/>
                                    <Setter Property="Foreground" Value="White" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="button"  Property="Background" Value="Green"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter TargetName="button" Property="BorderBrush" Value="#FF282828" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="button" Property="Opacity" Value="0.7" />
                                    <Setter Property="Foreground" Value="Gray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
        </Style>


        <Style x:Key="RoundedNegButton" TargetType="{x:Type Button}">
            <!-- Source code from https://gist.github.com/pocari/ef7778f1d67f568001e8 -->
            <Style.Setters>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="button" CornerRadius="5" BorderBrush="Black" BorderThickness="1" Background="{DynamicResource SelectableSecondary}">
                                <TextBlock  Text="{TemplateBinding Button.Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="button" Property="BorderBrush" Value="#FF5798d8" />
                                    <Setter TargetName="button" Property="Background"  Value="Red"/>
                                    <Setter Property="Foreground" Value="White" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="button"  Property="Background" Value="Green"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter TargetName="button" Property="BorderBrush" Value="#FF282828" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="button" Property="Opacity" Value="0.7" />
                                    <Setter Property="Foreground" Value="Gray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
        </Style>



    <!--
        Custom variables
    -->
        
        <!-- Change these to binding during runtime so themes can be changed in the future -->
        <SolidColorBrush x:Key="Background" Color="#424B54"/>
        <SolidColorBrush x:Key="Foreground" Color="#FFEDDF" />
        <SolidColorBrush x:Key="SelectablePrimary" Color="#C5D86D" />
        <SolidColorBrush x:Key="SelectableSecondary" Color="#EF6351" />
        <SolidColorBrush x:Key="SelectableLink" Color="#AFE0CE" />
        <SolidColorBrush x:Key="HighlightBackground" Color="#555555" />
        <SolidColorBrush x:Key="PressedBackground" Color="#777777" />
    </Application.Resources>
</Application>
